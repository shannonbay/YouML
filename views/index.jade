doctype html
html(lang="en")
  head
    link(rel="stylesheet", href="/stylesheets/style.css")
    meta(charset="UTF-8")
    meta(name="viewport" content="width=device-width, initial-scale=1.0")
    title YouML Diagram Generator
    script(src="/dist/plantuml-encoder/dist/plantuml-decoder.min.js")
    script(src="/dist/html2canvas/dist/html2canvas.min.js")
  body
    div(style='display: flex; align-items: center;')
      img(src='/images/logo.webp', alt='Icon', style='vertical-align: middle; margin-right: 10px; width: 80px; height: 80px;')
      h1 YouML Diagram Generator
    textarea#umlPrompt(rows="4", cols="50") sequence diagram. expressjs, frontend, send natural language diagram descriptions to api which first calls OpenAI API to generate plantUML, then invokes plantUML.com to generate the actual diagram image, and renders the image on the page. !theme amiga
    button(onclick="generateDiagram(false)") Generate Diagram
    button(onclick="generateDiagram(true)") Update Diagram
    div#diagram
      a#copySvgLink(href="javascript:void(0);", onclick="copySvgToClipboard()", style='display: none;') Copy SVG
      div#diagramOutput
    div#encodedDiagramContainer
      a#copyLink(href="javascript:void(0);", onclick="copyDecodedDiagram()", style='display: none;') Copy
      div#encodedDiagram

    script.
      let lastGeneratedDiagram = null;

      async function generateDiagram(isUpdate) {
        const prompt = document.getElementById('umlPrompt').value;

        const requestBody = {
          prompt,
          isUpdate,
          lastPlantUmlCode: lastGeneratedDiagram
        };
        try {
          const response = await fetch('/generate-uml', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody),
          });

          if (response.ok) {
            const { svgData, encodedDiagram } = await response.json();
            const decodedDiagram = plantumlEncoder.decode(encodedDiagram);
            document.getElementById('encodedDiagram').innerText = decodedDiagram;
            document.getElementById('diagramOutput').innerHTML = svgData;
            lastGeneratedDiagram = encodedDiagram; // Store the last generated diagram for future updates
            document.getElementById('copySvgLink').style.display = 'inline';
            document.getElementById('copyLink').style.display = 'inline';
            document.getElementById('umlPrompt').innerText = '';

          } else {
            console.error('Failed to generate diagram');
          }
        } catch (error) {
          console.error('Error:', error);
        }
      }

      function copySvgToClipboard() {
        const svg = document.getElementById('diagramOutput');

        html2canvas(svg).then(function(canvas) {
          canvas.toBlob(function(blob) {
            navigator.clipboard
              .write([
              new ClipboardItem(
                Object.defineProperty({}, blob.type, {
                  value: blob,
                  enumerable: true
                })
              )
            ])
            .then(function() {
              console.log("Copied to clipboard");
            });
          });
        });
      }

      function copyDecodedDiagram() {
        const decodedText = document.getElementById('encodedDiagram').innerText;
        navigator.clipboard.writeText(decodedText).then(() => {
          alert('Decoded diagram text copied to clipboard!');
        }).catch(err => {
          console.error('Failed to copy text: ', err);
        });
      }
