var sqrt=Math.sqrt,min=Math.min,max=Math.max,abs=Math.abs;function sq(t){return Math.pow(t,2)}function getDistance(t,n){return sqrt(sq(t.x-n.x)+sq(t.y-n.y))}export function getAttachment(t,n){var e,i,r,s,o,a,c,x,u,g,y=0;for(y=0;y<n.length-1;y++){if(pointsEqual(e=n[y],i=n[y+1])?a=[e]:(r=getDistance(t,e),s=getDistance(t,i),a=getCircleSegmentIntersections(e,i,t,min(r,s))),a.length<1)throw new Error("expected between [1, 2] circle -> line intersections");1===a.length&&(c={type:"bendpoint",position:a[0],segmentIndex:y,bendpointIndex:pointsEqual(e,a[0])?y:y+1}),2===a.length&&(c={type:"segment",position:o=mid(a[0],a[1]),segmentIndex:y,relativeLocation:getDistance(e,o)/getDistance(e,i)}),x=getDistance(c.position,t),(!g||u>x)&&(g=c,u=x)}return g}function getCircleSegmentIntersections(t,n,e,i){var r=n.x-t.x,s=n.y-t.y,o=e.x-t.x,a=e.y-t.y,c=r*r+s*s,x=(r*o+s*a)/c,u=x*x-(o*o+a*a-i*i)/c;if(u<0&&u>-1e-6&&(u=0),u<0)return[];var g=sqrt(u),y=-x+g,m=-x-g,f={x:t.x-r*y,y:t.y-s*y};return 0===u?[f]:[f,{x:t.x-r*m,y:t.y-s*m}].filter((function(e){return isPointInSegment(e,t,n)}))}function isPointInSegment(t,n,e){return fenced(t.x,n.x,e.x)&&fenced(t.y,n.y,e.y)}function fenced(t,n,e){return t>=min(n,e)-EQUAL_THRESHOLD&&t<=max(n,e)+EQUAL_THRESHOLD}function mid(t,n){return{x:(t.x+n.x)/2,y:(t.y+n.y)/2}}var EQUAL_THRESHOLD=.1;function pointsEqual(t,n){return abs(t.x-n.x)<=EQUAL_THRESHOLD&&abs(t.y-n.y)<=EQUAL_THRESHOLD}