import inherits from"inherits-browser";import{getBusinessObject,is}from"../../../util/ModelUtil";import CommandInterceptor from"diagram-js/lib/command/CommandInterceptor";import{hasEventDefinition,isEventSubProcess}from"../../../util/DiUtil";export default function CompensateBoundaryEventBehavior(n,e,o){function t(n){e.updateProperties(n,{isForCompensation:!0})}function i(n){e.updateProperties(n,{isForCompensation:void 0})}CommandInterceptor.call(this,n),this.preExecute("shape.replace",(function(n){const{newData:o,oldShape:t}=n;if(isCompensationBoundaryEvent(n.oldShape)&&"bpmn:CompensateEventDefinition"!==o.eventDefinitionType||"bpmn:BoundaryEvent"!==o.type){const e=t.outgoing.find((({target:n})=>isForCompensation(n)));e&&e.target&&(n._connectionTarget=e.target)}else if(!isCompensationBoundaryEvent(n.oldShape)&&"bpmn:CompensateEventDefinition"===o.eventDefinitionType&&"bpmn:BoundaryEvent"===o.type){const o=t.outgoing.find((({target:n})=>isForCompensationAllowed(n)));o&&o.target&&(n._connectionTarget=o.target),function(n){const o=n.outgoing.filter((n=>is(n,"bpmn:SequenceFlow")));e.removeElements(o)}(t)}}),!0),this.postExecuted("shape.replace",(function(n){const{_connectionTarget:o,newShape:t}=n;o&&e.connect(t,o)}),!0),this.preExecute("connection.create",(function(n){const o=n.connection,i=n.source,s=n.target;isCompensationBoundaryEvent(i)&&isForCompensationAllowed(s)&&(t(s),function(n,o){const t=n.outgoing.filter((n=>is(n,"bpmn:Association")));t.filter((n=>isForCompensation(n.target)&&!o.includes(n))).forEach((n=>e.removeConnection(n)))}(i,[o]))}),!0),this.postExecuted("connection.delete",(function(n){const e=n.source,o=n.target;isCompensationBoundaryEvent(e)&&isForCompensation(o)&&i(o)}),!0),this.postExecuted("connection.reconnect",(function(n){const e=n.newTarget,o=n.oldSource,s=n.oldTarget;if(s!==e){const n=o;isForCompensation(s)&&i(s),isCompensationBoundaryEvent(n)&&isForCompensationAllowed(e)&&t(e)}}),!0),this.postExecuted("element.updateProperties",(function(n){const{element:t}=n;isForCompensation(t)?(function(n){for(const t of n.incoming)o.canConnect(t.source,n)||e.removeConnection(t);for(const t of n.outgoing)o.canConnect(n,t.target)||e.removeConnection(t)}(t),function(n){const o=n.attachers.slice();o.length&&e.removeElements(o)}(t)):isForCompensationAllowed(t)&&function(n){const o=n.incoming.filter((n=>isCompensationBoundaryEvent(n.source)));e.removeElements(o)}(t)}),!0)}function isForCompensation(n){const e=getBusinessObject(n);return e&&e.get("isForCompensation")}function isCompensationBoundaryEvent(n){return n&&is(n,"bpmn:BoundaryEvent")&&hasEventDefinition(n,"bpmn:CompensateEventDefinition")}function isForCompensationAllowed(n){return n&&is(n,"bpmn:Activity")&&!isEventSubProcess(n)}inherits(CompensateBoundaryEventBehavior,CommandInterceptor),CompensateBoundaryEventBehavior.$inject=["eventBus","modeling","bpmnRules"];