import inherits from"inherits-browser";import CommandInterceptor from"diagram-js/lib/command/CommandInterceptor";import{is}from"../../../util/ModelUtil";export default function EventBasedGatewayBehavior(e,n){CommandInterceptor.call(this,e),this.preExecuted("connection.create",(function(e){var t=e.context,o=t.connection,i=t.source,r=t.target,c=t.hints;c&&!1===c.createElementsBehavior||!isSequenceFlow(o)||(is(i,"bpmn:EventBasedGateway")?r.incoming.filter((e=>e!==o&&isSequenceFlow(e))):r.incoming.filter((e=>e!==o&&isSequenceFlow(e)&&is(e.source,"bpmn:EventBasedGateway")))).forEach((function(e){n.removeConnection(e)}))})),this.preExecuted("shape.replace",(function(e){var t=e.context.newShape;is(t,"bpmn:EventBasedGateway")&&t.outgoing.filter(isSequenceFlow).reduce((function(e,n){return e.includes(n.target)?e:e.concat(n.target)}),[]).forEach((function(e){e.incoming.filter(isSequenceFlow).forEach((function(o){const i=e.incoming.filter(isSequenceFlow).filter((function(e){return e.source===t}));(o.source!==t||i.length>1)&&n.removeConnection(o)}))}))}))}function isSequenceFlow(e){return is(e,"bpmn:SequenceFlow")}EventBasedGatewayBehavior.$inject=["eventBus","modeling"],inherits(EventBasedGatewayBehavior,CommandInterceptor);